/**
 * @fileoverview Firestore Security Rules for F1129 form data and RandOp entries.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Only the authenticated user who "owns" a document (i.e., whose UID matches the `userId` path segment) can read, create, update, or delete that document. This ownership is enforced through path-based authorization.
 *
 * Data Structure:
 * All data is nested under `/users/{userId}`, creating a private data tree for each user.  F1129 form data is stored under `/users/{userId}/f1129s/{f1129Id}`, and individual payment operation rows (RandOp) are stored under `/users/{userId}/f1129s/{f1129Id}/randOps/{randOpId}`.
 *
 * Key Security Decisions:
 * - User listing is implicitly denied because there is no top-level listing.
 * - There are no admin roles or public collections in this data model.
 * - Schema validation is relaxed in this prototyping phase, focusing on ownership and relational integrity checks only.
 *
 * Denormalization for Authorization:
 * The data model uses path-based authorization. The `userId` in the path is used to determine ownership, eliminating the need for denormalized fields in the documents themselves.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces owner-only access to F1129 form data.
     * @path /users/{userId}/f1129s/{f1129Id}
     * @allow (create) - User 'user123' can create a new F1129 document with ID 'f1129_abc' under their user ID.
     * @allow (get, update, delete) - User 'user123' can read, update or delete F1129 document 'f1129_abc' under their user ID.
     * @deny Any other user attempting to access, create, update, or delete F1129 documents under another user ID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/f1129s/{f1129Id} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the user is the owner of the document and the document exists
      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      // Read permissions
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Write permissions
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces owner-only access to RandOp (payment operation row) data.
     * @path /users/{userId}/f1129s/{f1129Id}/randOps/{randOpId}
     * @allow (create) - User 'user123' can create a new RandOp document under F1129 'f1129_abc'.
     * @allow (get, update, delete) - User 'user123' can read, update or delete RandOp document under F1129 'f1129_abc'.
     * @deny Any other user attempting to access, create, update, or delete RandOp documents under another user's F1129 document.
     * @principle Enforces document ownership for all operations, inheriting from the parent F1129 document.
     */
    match /users/{userId}/f1129s/{f1129Id}/randOps/{randOpId} {
       // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the user is the owner of the document and the document exists
      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      // Read permissions
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Write permissions
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}